import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

from methods.svc_self_training import predict_tsvm_cccp
from methods.LS_SVM_help import predict_ls_help
from methods.Laplacian_SVM import predict_lapsvm

def apply_predictions(df, predictions, target_column, y_unlabeled, full=False):
    df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑'] = df[target_column]
    df['–ò—Å—Ç–æ—á–Ω–∏–∫'] = '—Ä—É—á–Ω–æ–µ'
    if full and len(predictions) == len(df):
        df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑'] = predictions
        df.loc[y_unlabeled.index, '–ò—Å—Ç–æ—á–Ω–∏–∫'] = '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'
    elif len(predictions) == len(y_unlabeled):
        df.loc[y_unlabeled.index, '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑'] = predictions
        df.loc[y_unlabeled.index, '–ò—Å—Ç–æ—á–Ω–∏–∫'] = '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'
    else:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    return df

st.set_page_config(page_title="SVM –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫", layout="wide")
st.title("ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ S3VM")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏), —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–∏–∞–≥–Ω–æ–∑ ‚Äî –∏ –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ **–ø–æ–ª—É–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è** –æ–±—É—á–∏—Ç—Å—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π üß†‚ú®
""")

uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à .csv —Ñ–∞–π–ª", type=["csv"])

MODEL_PARAM_WIDGETS = {
    "LapSVM": lambda: {
        "gamma": st.number_input("Gamma", value=0.5),
        "lamA": st.number_input("ŒªA (—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ)", value=10.0),
        "lamI": st.number_input("ŒªI (–Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ)", value=10.0),
        "k": st.number_input("k (—Å–æ—Å–µ–¥–∏)", value=10, min_value=1, step=1)
    },
    "Gradient S3VM": lambda: {
        "C": st.number_input("C (—Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)", value=1.0),
        "C_star_final": st.number_input("C* (–Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ)", value=0.1),
        "gamma": st.number_input("Gamma (—è–¥—Ä–æ)", value=1.0)
    },
    "LS-SVM + Help-Training Classifier": lambda: {
        "gamma": st.number_input("Gamma", value=30.0),
        "sigma": st.number_input("Sigma", value=13.5)
    }
}

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ")
    st.dataframe(df.head())

    target_column = st.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç–∫–æ–π (–¥–∏–∞–≥–Ω–æ–∑–æ–º)", df.columns)
    possible_features = [col for col in df.columns if col != target_column]

    if 'feature_columns' not in st.session_state:
        st.session_state.feature_columns = []

    if st.button("üìå –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"):
        st.session_state.feature_columns = possible_features

    st.session_state.feature_columns = st.multiselect(
        "üß¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        possible_features,
        default=st.session_state.feature_columns
    )

    feature_columns = st.session_state.feature_columns

    selected_method = st.selectbox("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è",
        ["Gradient S3VM",
        "LS-SVM + Help-Training Classifier",
        "Laplacian SVM",
        ])

    method_functions = {
        "Gradient S3VM": predict_tsvm_cccp,
        "LS-SVM + Help-Training Classifier": predict_ls_help,
        "Laplacian SVM": predict_lapsvm,
    }

    with st.expander("‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏"):
        get_params = MODEL_PARAM_WIDGETS.get(selected_method)
        model_params = get_params() if get_params else {}

    if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        if not feature_columns:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        else:
            X = df[feature_columns]
            y = df[target_column]

            y_clean = y.fillna(-1).astype(int)
            X_scaled = StandardScaler().fit_transform(X)

            X_unlabeled = X_scaled[y_clean == -1]
            y_unlabeled = y[y_clean == -1]

            X_labeled = X_scaled[y_clean != -1]
            y_labeled = y[y_clean != -1]

            st.info(f"–û–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(X_labeled)} —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∏ {len(X_unlabeled)} –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö")
            
            method_fn = method_functions.get(selected_method)

            if method_fn:
                predictions = method_fn(
                    X_labeled, y_labeled, X_unlabeled, **model_params
                )
                df = apply_predictions(df, predictions, target_column, y_unlabeled, full=True)

                st.success("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞! –í–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
                st.dataframe(df[[target_column, '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑']])

                with st.expander("üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (PCA)"):
                    pca = PCA(n_components=2)
                    X_vis = pca.fit_transform(X_scaled)
                    plt.figure(figsize=(8, 6))
                    is_labeled = df['–ò—Å—Ç–æ—á–Ω–∏–∫'] == '—Ä—É—á–Ω–æ–µ'
                    is_predicted = df['–ò—Å—Ç–æ—á–Ω–∏–∫'] == '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'

                    plt.scatter(
                        X_vis[is_labeled, 0], X_vis[is_labeled, 1],
                        c=pd.Categorical(df.loc[is_labeled, '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑']).codes,
                        cmap='viridis', marker='o', alpha=0.6, label='–õ–µ–π–±–ª—ã'
                    )
                    plt.scatter(
                        X_vis[is_predicted, 0], X_vis[is_predicted, 1],
                        c=pd.Categorical(df.loc[is_predicted, '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑']).codes,
                        cmap='viridis', marker='x', alpha=0.9, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'
                    )
                    plt.xlabel("PCA 1")
                    plt.ylabel("PCA 2")
                    plt.title("–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (PCA)")
                    plt.colorbar(label='–î–∏–∞–≥–Ω–æ–∑')
                    plt.legend()
                    st.pyplot(plt.gcf())

                st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∏–∞–≥–Ω–æ–∑–∞–º–∏", data=df.to_csv(index=False).encode('utf-8'), file_name= selected_method + " result.csv")
            else:
                st.warning("–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
        
        

        
