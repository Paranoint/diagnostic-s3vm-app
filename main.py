import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

from sklearn.svm import SVC
from sklearn.semi_supervised import SelfTrainingClassifier
#from dummy_lapsvm import LapSVM  # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

st.set_page_config(page_title="SVM –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫", layout="wide")
st.title("ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ S3VM")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏), —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–∏–∞–≥–Ω–æ–∑ ‚Äî –∏ –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ **–ø–æ–ª—É–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è** –æ–±—É—á–∏—Ç—Å—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π üß†‚ú®
""")

uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à .csv —Ñ–∞–π–ª", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ")
    st.dataframe(df.head())

    target_column = st.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç–∫–æ–π (–¥–∏–∞–≥–Ω–æ–∑–æ–º)", df.columns)
    possible_features = [col for col in df.columns if col != target_column]

    if 'feature_columns' not in st.session_state:
        st.session_state.feature_columns = []

    if st.button("üìå –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"):
        st.session_state.feature_columns = possible_features

    st.session_state.feature_columns = st.multiselect(
        "üß¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        possible_features,
        default=st.session_state.feature_columns
    )

    feature_columns = st.session_state.feature_columns
    if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        df[target_column] = df[target_column].replace(-1, np.nan)
        X = df[feature_columns]
        y = df[target_column]

        X_unlabeled = X[y.isnull()]
        y_unlabeled = y[y.isnull()]

        X_labeled = X[~y.isnull()]
        y_labeled = y[~y.isnull()].astype(int)

        st.info(f"–û–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(X_labeled)} —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∏ {len(X_unlabeled)} –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö")

        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        y_semi = y.copy()
        y_semi[y_semi.isnull()] = -1
        y_semi = y_semi.astype(int)

        base_model = SVC(kernel='rbf', C=1.0, gamma='scale', probability=True)
        model = SelfTrainingClassifier(base_model, threshold=0.95)

        model.fit(X_scaled, y_semi)

        predictions = model.predict(X_scaled)
        df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑'] = df[target_column]
        df.loc[y_unlabeled.index, '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑'] = pd.Series(predictions, index=df.index)[y_unlabeled.index]

        st.success("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞! –í–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        st.dataframe(df[[target_column, '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑']])

        with st.expander("üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (PCA)"):
            pca = PCA(n_components=2)
            X_vis = pca.fit_transform(scaler.transform(X))
            plt.figure(figsize=(8, 6))
            scatter = plt.scatter(X_vis[:, 0], X_vis[:, 1], c=pd.Categorical(df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑']).codes, cmap='viridis')
            plt.title("–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (PCA)")
            plt.colorbar(scatter, ticks=range(len(df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑'].unique())), label='–î–∏–∞–≥–Ω–æ–∑')
            st.pyplot(plt.gcf())

        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∏–∞–≥–Ω–æ–∑–∞–º–∏", data=df.to_csv(index=False).encode('utf-8'), file_name="s3vm_diagnosis_result.csv")
